import numpy as np
from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
import tensorflow.keras as keras

# Load digits dataset
digits = load_digits()
X = digits.data
y = digits.target

# One-hot encode the target variable
encoder = OneHotEncoder()
y_onehot = encoder.fit_transform(y.reshape(-1, 1)).toarray()

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y_onehot, test_size=0.3, random_state=42)

# Define the architecture of the neural network
model = keras.Sequential([
    keras.Input(shape=(64,)),  # Input layer with explicit input shape
    keras.layers.Dense(64, activation='relu'),  # Hidden layer with ReLU activation
    keras.layers.Dense(10, activation='softmax')  # Output layer with Softmax activation
])

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.2)

# Evaluate the model on test data
test_loss, test_acc = model.evaluate(X_test, y_test)
print('Test accuracy:', test_acc)
