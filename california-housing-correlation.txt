import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Load the California housing dataset
california_housing = fetch_california_housing()

# Convert to pandas DataFrame
data = pd.DataFrame(california_housing.data, columns=california_housing.feature_names)
target = pd.DataFrame(california_housing.target, columns=['Target'])

# Concatenate features and target into a single DataFrame
df = pd.concat([data, target], axis=1)

# Calculate correlation matrix
correlation_matrix = df.corr()

# Display correlation matrix
print("Correlation Matrix:")
print(correlation_matrix)

# Choose a feature for linear regression
feature = 'MedInc'  # For example, let's choose 'MedInc'

# Split the data into features (X) and target variable (y)
X = df[[feature]].values
y = df['Target'].values

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Fit the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

# Calculate error (Mean Squared Error)
mse = mean_squared_error(y_test, y_pred_test)

# Plot the data and the best fit line
plt.scatter(X_test, y_test, color='blue', label='Actual data')
plt.plot(X_test, y_pred_test, color='red', label='Best Fit Line')
plt.title('California Housing Dataset - Linear Regression')
plt.xlabel(feature)
plt.ylabel('Target')
plt.legend()
plt.show()

print("Mean Squared Error:", mse)
