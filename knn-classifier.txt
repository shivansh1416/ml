from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Load Iris dataset
iris = load_iris()
X = iris.data
y = iris.target

# Normalize the dataset
scaler = StandardScaler()
X_normalized = scaler.fit_transform(X)

# Split the dataset into training, validation, and testing sets (70:15:15)
X_train, X_temp, y_train, y_temp = train_test_split(X_normalized, y, test_size=0.3, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# Initialize variables to store best k and its corresponding validation accuracy
best_k = None
best_val_accuracy = 0

# Test different values of k
for k in range(1, 21):
    # Initialize KNN classifier
    knn = KNeighborsClassifier(n_neighbors=k)
    
    # Train the classifier on the training data
    knn.fit(X_train, y_train)
    
    # Predict labels for validation set
    y_val_pred = knn.predict(X_val)
    
    # Calculate validation accuracy
    val_accuracy = accuracy_score(y_val, y_val_pred)
    
    # Check if current k gives better validation accuracy
    if val_accuracy > best_val_accuracy:
        best_k = k
        best_val_accuracy = val_accuracy

# Initialize KNN classifier with best k
best_knn = KNeighborsClassifier(n_neighbors=best_k)

# Train the best classifier on the training + validation data
X_train_val = X_train = X_val
y_train_val = y_train = y_val
best_knn.fit(X_train_val, y_train_val)

# Predict labels for training, validation, and testing sets
y_train_pred = best_knn.predict(X_train)
y_val_pred = best_knn.predict(X_val)
y_test_pred = best_knn.predict(X_test)

# Calculate training, validation, and testing accuracy
train_accuracy = accuracy_score(y_train, y_train_pred)
val_accuracy = accuracy_score(y_val, y_val_pred)
test_accuracy = accuracy_score(y_test, y_test_pred)

print("Best k:", best_k)
print("Training Accuracy:", train_accuracy)
print("Validation Accuracy:", val_accuracy)
print("Testing Accuracy:", test_accuracy)

# Calculate and display confusion matrix for testing set
conf_matrix = confusion_matrix(y_test, y_test_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, cmap='Blues', fmt='d', xticklabels=iris.target_names, yticklabels=iris.target_names)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix (Testing Set)')
plt.show()
